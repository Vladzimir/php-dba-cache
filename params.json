{"name":"PHP DBA Cache","tagline":"Create a caching with the Database (dbm-style) Abstraction Layer to cache your objects, strings, integers or arrays.","body":"Introduction\r\n============\r\n\r\nThe php-dba-cache uses the database (dbm-style) abstraction layer to cache/store your PHP objects, \r\nstrings, integers or arrays. Even instances of SimpleXMLElement can be put to the cache. You dont \r\nhave to matter about the size of the cache-file. It depends on the free space of your disk.\r\n\r\n[![Build Status](https://travis-ci.org/gjerokrsteski/php-dba-cache.png?branch=master)](https://travis-ci.org/gjerokrsteski/php-dba-cache)\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/gjerokrsteski/php-dba-cache/badges/quality-score.png?s=05c35e93b4026539019555e034a9996839a3c658)](https://scrutinizer-ci.com/g/gjerokrsteski/php-dba-cache/)\r\n[![Dependency Status](https://www.versioneye.com/php/gjerokrsteski:php-dba-cache/dev-master/badge.png)](https://www.versioneye.com/php/gjerokrsteski:php-dba-cache/dev-master)\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/gjerokrsteski/php-dba-cache/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n\r\nAvailable options\r\n===========================\r\n\r\nCache\r\n- Open a given dba database\r\n- Insert a new record with a given key (persistently or with a given expiration time)\r\n- Get a record with a given key\r\n- Replace the value of a record with a given key\r\n- Delete the record with a given key\r\n- Return metadata for the given key: expire timestamp & timestamp of last modification time\r\n- Get all keys from cache\r\n    \r\nSweep - CacheGarbageCollector (optional)\r\n- Clean all entries\r\n- Clean expired entries\r\n- Flush the cache file\r\n- Optimizes the database file automatically after cleaning process\r\n\r\nInstallation\r\n============\r\n\r\n\"By using the --enable-dba=shared configuration option you can build a dynamic loadable module\r\nto enable PHP for basic support of dbm-style databases. You also have to add support for at\r\nleast one of the following handlers by specifying the --with-XXXX configure switch\r\nto your PHP configure line.\"\r\n    \r\nMore about installation: http://www.php.net/manual/en/dba.installation.php\r\n\r\nDBA handlers\r\n============\r\n\r\nThe behaviour of various aspects for the caching depends on the implementation of yor\r\ninstalled dba-type database. I have tested it with several database-handlers like db4, flatfile,\r\ncdb, cdb_make, gdbm. The cdb & cdb_make family is the fastest, but you have to create\r\nyou own garbage-collection-cleaner or you can delete it manually. Take a look at the tests\r\n(https://github.com/gjerokrsteski/php-dba-cache/tree/master/tests) to better understand\r\nhow to use the cache.\r\n\r\ncdb = Tiny Constant Database - for reading\r\nCdb is \"a fast, reliable, lightweight package for creating and reading constant databases.\r\n\" It is from the author of qmail and can be found at http://cr.yp.to/cdb.html. Since it is\r\nconstant, we support only reading operations. And since PHP 4.3.0 we support writing\r\n(not updating) through the internal cdb library.\r\n\r\ncdb_make = Tiny Constant Database - for writing\r\nSince PHP 4.3.0 we support creation of cdb files when the bundled cdb library is used.\r\n\r\ndb4 = Oracle Berkeley DB 4 - for reading and writing\r\nDB4 is Sleepycat Software's DB4. This is available since PHP 4.3.2.\r\n\r\ngdbm = GNU Database Manager - for reading and writing\r\nGdbm is the GNU database manager.\r\n\r\nflatfile = default dba extension - for reading and writing\r\nThis is available since PHP 4.3.0 for compatibility with the deprecated dbm extension only\r\nand should be avoided. However you may use this where files were created in this format.\r\nThat happens when configure could not find any external library.\r\n    \r\nMore about requirements: http://www.php.net/manual/en/dba.requirements.php\r\n\r\n\r\nNice to know\r\n------------\r\n\r\nNot all of the DBA-style databases can replace key-value pairs, like the CDB. The CDB database\r\ncan handle only with fixed key-value pairs. The best and fastest handlers for DBA-style caching\r\nare: QDBM, Berkeley DB (DB4), NDBM and least the Flatfile.\r\nMost problematic are dbm and ndbm which conflict with many installations. The reason for this is\r\nthat on several systems these libraries are part of more than one other library. The configuration\r\ntest only prevents you from configuring malfaunctioning single handlers but not combinations.\r\n\r\nSample for Oracle Berkeley DB 4 with persistent connection\r\n----------------------------------------------------------\r\n\r\n```php\r\n$cache = new Cache(\r\n  '/your/path/to/the/cahe-file/cache.db4', 'db4'\r\n);\r\n\r\n$yorObject            = new ObjectYouWantToPutInCache();\r\n$yourObjectIdentifier = 'your:cool:object:identifier';\r\n\r\n// Check if your object is in the cache.\r\n// You also can ignore it, and let the CacheDba do it for you.\r\nif (false == $cache->has($yourObjectIdentifier)) {\r\n  $cache->delete($yourObjectIdentifier);\r\n}\r\n\r\n$cache->put($yourObjectIdentifier, $yorObject);\r\n\r\n// Than somewhere at your project.\r\n$cache->get($yourObjectIdentifier);\r\n\r\n// For the garbage collection \r\n// you can create an cron-job starting once a day.\r\n$sweep = new Sweep($cache);\r\n$sweep->all();\r\n\r\n// or clean all objects older than given expiration since now.\r\n$sweep->old();\r\n```\r\n\r\nSaving SimpleXMLElement instances into DB 4 with persistent connection\r\n----------------------------------------------------------------------\r\n\r\n```php\r\n$string = \"<?xml version='1.0'?>\r\n<document>\r\n <title>Let us cache</title>\r\n <from>Joe</from>\r\n <to>Jane</to>\r\n <body>Some content here</body>\r\n</document>\";\r\n\r\n$simplexml = simplexml_load_string(\r\n    $string,\r\n    'SimpleXMLElement',\r\n    LIBXML_NOERROR|LIBXML_NOWARNING|LIBXML_NONET\r\n);\r\n\r\n$identifier = md5('simplexml_identifier');\r\n\r\n$path = dirname(__FILE__).'/simple-xml-test-cache.db4';\r\n$cache = new Cache($path, 'db4');\r\n\r\n$cache->put($identifier, $simplexml);\r\n\r\n$getObject = $cache->get($identifier);\r\n\r\nerror_log(' - PUT IN CACHE : '.print_r($simplexml, true));\r\nerror_log(' - GET FROM CACHE : '.print_r($getObject, true));\r\n\r\nerror_log(' - IS SAME OBJECT : '.\r\n    print_r(($simplexml->asXml() === $getObject->asXml())\r\n            ? 'true' : 'false', true));\r\n```\r\n\r\nPHP DBA Cache Monitor\r\n---------------------\r\nResponsive web-interface that provides a comprehensive, easy to use and of course good looking GUI. It not only gives access to statistical parameters of DBA Cache, it also makes it easier to administer a web-server running DBA by providing comfortable features for optimizing the cache and deleting entries from the cache.\r\n \r\n ![PHP DBA cache Monitor 2014](http://farm9.staticflickr.com/8528/8547311457_9e4a7ca45d.jpg \"PHP DBA Cache Monitor\")\r\n\r\n\r\nBenchmark Test of DBM Brothers\r\n------------------------------\r\n\r\nThis benchmark test is to calculate processing time (real time)\r\nand file size of database. Writing test is to store 1,000,000 records. Reading test is\r\nto fetch all of its records. Both of the key and the value of each record are such 8-byte\r\nstrings as `00000001', `00000002', `00000003'... Tuning parameters of each DBM are set to\r\ndisplay its best performance. Platform: Linux 2.4.31 kernel, EXT2 file system,\r\nPentium4 1.7GHz CPU, 1024MB RAM, ThinkPad T42 Compilation: gcc 3.3.2 (using -O3), glibc 2.3.3\r\n\r\nResult\r\n```cli\r\nNAME        DESCRIPTION                             WRITE TIME  READ TIME   FILE SIZE\r\nQDBM        Quick Database Manager 1.8.74           1.89        1.58        55257\r\nNDBM        New Database Manager 5.1                8.07        7.79        814457\r\nSDBM        Substitute Database Manager 1.0.2       11.32       0.00        606720\r\nGDBM        GNU Database Manager 1.8.3              14.01       5.36        82788\r\nTDB         Trivial Database 1.0.6                  9.64        2.22        51056\r\nCDB         Tiny Constant Database 0.75             0.87        0.80        39065\r\nBDB         Berkeley DB 4.4.20                      9.62        5.62        40956\r\nQDBM-BT-ASC B+ tree API of QDBM (ascending order)   2.37        1.78        24304\r\nQDBM-BT-RND B+ tree API of QDBM (at random)         10.90       4.82        15362\r\nBDB-BT-ASC B+ tree API of BDB (ascending order)     3.04        3.06        27520\r\nBDB-BT-RND B+ tree API of BDB (at random)           10.03       4.15        29120\r\n```\r\n\r\nUnit of time is seconds. Unit of size is kilo bytes. Read time of SDBM can not be calculated\r\nbecause its database is broken when more than 100000 records.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}